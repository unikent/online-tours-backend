{"version":3,"sources":["map.js"],"names":[],"mappingsfile":"map.min.js","sourcesContent":[" /**\n  * MapHelper - Wrapper around google maps API to make drawing a little easier\n  *\n  * Note: ensure google maps include has libraries=drawing enabled.\n  */\n  (function(){\n\t var MapHelper = function(container, config){\n\t \t// this for callbacks.\n\t\tvar that = this;\n\n\t\t// vars\n\t\tthis.config = config;\n\t\tthis.labels = {\n\t\t\t\"marker\": \"Add Marker\",\n\t\t\t\"polygon\": \"Add Polygon\",\n\t\t\t\"delete\": \"Delete\",\n\t\t};\n\n\t\t// internals\n\t\tthis.container = container;\n\t\tthis.mapNode = null;\n\t\tthis.map = null;\n\t\tthis.buttons = {};\n\t\tthis.drawingManager = null;\n\n\t\t// objects\n\t\tthis.data = {\"polygon\":[], \"marker\": [], \"geoJSON\":null, \"features\":[]}\n\t\tthis.constraints = {};\n\n\t\t// callbacks\n\t\tthis.onchange = function(helper) {};\n\n\t\t// Selected\n\t\tthis.selected = null;\n\n\t\t/**\n\t\t * Init - set up new helper\n\t\t * Creates Map plus additional UI buttons + hooks everything up\n\t\t *\n\t\t */\n\t\tthis.init = function(params){\n\t\t\t// Render UI\n\t\t\tthis.renderUi();\n\n\t\t\t// Create the map\n\t\t\toptions = $.extend({\n\t\t\t\tzoom: 15,\n\t\t\t\tminZoom: 10,\n\t\t\t\tmaxZoom: 18,\n\t\t\t\tcenter: new google.maps.LatLng(51.2973229, 1.0665176),\n\t\t\t\tdisableDefaultUI: true,\n\t\t\t\tzoomControl: true,\n\t\t\t\tstyles: [{\n\t\t\t\t\tfeatureType: \"poi\",\n\t\t\t\t\telementType: \"labels\",\n\t\t\t\t\tstylers: [{ visibility: \"off\" }]\n\t\t\t\t}],\n\t\t\t}, params);\n\n\t\t\tthis.map = new google.maps.Map(this.mapNode[0], options);\n\n\t\t\t// Create Drawing manager (no UI)\n\t\t\tthis.drawingManager = new google.maps.drawing.DrawingManager({drawingControl: false});\n\t\t\tthis.drawingManager.setMap(this.map);\n\n\t\t\t// Enable Polygon function\n\t\t\tif(this.buttons['polygon']){\n\t\t\t\tthis.buttons['polygon'].click(function(e){\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthat.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.POLYGON);\n\t\t\t\t});\n\t\t\t}\n\t\t\t\n\t\t\t// Enable Point function\n\t\t\tif(this.buttons['marker']){\n\t\t\t\tthis.buttons['marker'].click(function(e){\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthat.drawingManager.setDrawingMode(google.maps.drawing.OverlayType.MARKER);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Add the delete button\n\t\t\tif(this.buttons['del']){\n\t\t\t\tthis.buttons['del'].click(function(e){\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthat.deleteSelected();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Polygon draw complete\n\t\t\tgoogle.maps.event.addListener(that.drawingManager, 'overlaycomplete', function(e) {\n\t\t\t\t// Switch back to non-drawing mode after drawing a shape.\n\t\t\t\tthat.drawingManager.setDrawingMode(null);\n\t\t\t\tthat.addMapItem(e.overlay, e.type);\n\t\t\t});\n\n\t\t\t// change drawing mode\n\t\t\tgoogle.maps.event.addListener(this.drawingManager, 'drawingmode_changed', function(){\n\t\t\t\tthat.clearSelection();\n\t\t\t});\n\n\t\t\t// click on map (deselect)\n\t\t\tgoogle.maps.event.addListener(this.map, 'click', function(){\n\t\t\t\tthat.clearSelection();\n\t\t\t});\n\t\t};\n\n\t\t/**\n\t\t * AddMapItem\n\t\t * Configures a map item \"overlay\" to enable interaction with it + track changes\n\t\t *\n\t\t * @param item \"overlay\" object\n\t\t * @param type marker|polygon\n\t\t */\n\t\tthis.addMapItem = function(item, type, select){\n\n\t\t\t// Set basics\n\t\t\titem.type = type;\n\n\t\t\t// Set draggable (on by default) \n\t\t\tif(typeof this.constraints[type] !== 'undefined' && typeof this.constraints[type].draggable !== 'undefined'){\n\t\t\t\titem.setDraggable(this.constraints[type].draggable);\n\t\t\t}else{\n\t\t\t\titem.setDraggable(true);\n\t\t\t}\n\n\t\t\t// Hook up additional events for poly (ignore for markers)\n\t\t\tif(type !== 'marker'){\n\n\t\t\t\t// Dashed line?\n\t\t\t\titem.setOptions({\n\t\t\t\t\t'fillOpacity':0,\n\t\t\t\t\t'strokeOpacity':1,  \n\t\t\t\t});\n\n\t\t\t\tgoogle.maps.event.addListener(item, 'click', function() {\n\t\t\t\t\tthat.setSelection(item);\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tif(typeof select === 'undefined' || select === true) this.setSelection(item);\n\t\t\t}\n\n\t\t\t// Set sync up so we can track changes\n\t\t\tgoogle.maps.event.addListener(item, 'mouseup', function() {\n\t\t\t\tthat.syncChanges();\n\t\t\t});\n\t\t\t\n\n\t\t\t// Add to data store\n\t\t\tthat.data[type].push(item);\n\t\t\titem.index_id = (that.data[type].length-1);\n\n\t\t\t// check if button add is needed (enforces \"max\")\n\t\t\tif(this.buttons[type]){\n\t\t\t\tif(typeof this.constraints[type] !== 'undefined' && typeof this.constraints[type].max !== 'undefined'){\n\t\t\t\t\tif(that.getCountOfType(type) >= this.constraints[type].max) that.buttons[type].attr('disabled', 'disabled');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Sync this change\n\t\t\tthat.syncChanges();\n\t\t};\n\n\n\t\tthis.getCountOfType = function(type){\n\t\t\tvar count = 0;\n\t\t\tfor(var c in this.data[type]){\n\t\t\t\tif(this.data[type][c] !== false) count++;\n\t\t\t}\n\t\t\treturn count;\n\t\t}\n\n\t\t/**\n\t\t * AddMapItem\n\t\t * Removes a map \"overlay\"\n\t\t *\n\t\t * @param item \"overlay\" object\n\t\t */\n\t\tthis.removeMapItem = function(item){\n\t\t\t// clear data\n\t\t\tthat.data[item.type][item.index_id] = false;\n\t\t\t// Remove from map\n\t\t\titem.setMap(null);\n\t\t\t// Sync change\n\t\t\tthat.syncChanges();\n\t\t};\n\n\t\t/**\n\t\t * setSelection\n\t\t * Selects a map object\n\t\t *\n\t\t * @param item \"overlay\" object\n\t\t */\n\t\tthis.setSelection = function(shape) {\n\t\t\tthis.clearSelection();\n\t\t\tthis.selected = shape;\n\t\t\tshape.setEditable(true);\n\t\t\tshape.setDraggable(this.constraints[shape.type].draggable);\n\n\t\t\tif(this.buttons['del']){\n\t\t\t\tthis.buttons['del'].attr('disabled', 'disabled');\n\t\t\t}\n\t\t} ;\n\n\t\t/**\n\t\t * clearSelection\n\t\t * deselects a map object\n\t\t */\n\t\tthis.clearSelection = function() {\n\t\t\tif (this.selected) {\n\t\t\t\tthis.selected.setEditable(false);\n\t\t\t\tthis.selected.setDraggable(false);\n\t\t\t\tthis.selected = null;\n\n\t\t\t\tif(this.buttons['del']){\n\t\t\t\t\tthis.buttons['del'].attr('disabled', 'disabled');\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * deleteSelected\n\t\t * Removes the selected overlay\n\t\t */\n\t\tthis.deleteSelected = function(){\n\t\t\tif (this.selected) {\n\t\t\t\tthis.removeMapItem(this.selected);\n\t\t\t\tthis.clearSelection();\n\n\t\t\t\t// check if button add is needed (enforces \"max\")\n\t\t\t\tif(typeof this.buttons['polygon'] !== 'undefined'){\n\t\t\t\t\tif((typeof this.constraints['polygon'] !== 'undefined') && (typeof this.constraints['polygon'].max !== 'undefined')){\n\t\t\t\t\t\tif(that.getCountOfType('polygon') < this.constraints['polygon'].max){\n\t\t\t\t\t\t\tthat.buttons['polygon'].removeAttr('disabled');\n\t\t\t\t\t\t} \n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t/**\n\t\t * syncChanges\n\t\t * Sync's changes to overlays to an external callback\n\t\t */\n\t\tthis.syncChanges = function(){\n\t\t\t// Guessing gmaps is being a bit asyncy - sometimes update triggers before objects are actually updated\n\t\t\t// minimum set timeout seems to fix\n\t\t\tsetTimeout(function(){\n\t\t\t\tthat.onchange(that);\n\t\t\t},1);\n\t\t\t\t\n\t\t};\n\n\t\t/**\n\t\t * load Changes\n\t\t * Reloads map data from an external data source\n\t\t *\n\t\t * @param data {\"lat\": int, \"lng\": int \"poly\": []}\n\t\t * @param center - true|false center on the lng/lat\n\t\t */\n\t\tthis.loadChanges = function(data, center){\n\t\t\t// Clear out existing polys\n\t\t\tif(this.data.polygon.length !== 0){\n\t\t\t\tfor(var ply in this.data.polygon){\n\t\t\t\t\tif(this.data.polygon[ply]) this.removeMapItem(this.data.polygon[ply]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Clear out existing markers\n\t\t\tif(this.data.marker.length !== 0){\n\t\t\t\tfor(var mkr in this.data.marker){\n\t\t\t\t\tif(this.data.marker[mkr]) this.removeMapItem(this.data.marker[mkr]);\n\t\t\t\t}\n\t\t\t}\n\n            if(this.data.features.length !== 0){\n                for (var i = 0; i < this.data.features.length; i++) {\n                    this.map.data.remove(this.data.features[i]);\n                }\n                this.data.features=[];\n            }\n\n\t\t\t// get new markers\n\t\t\tif(data.markers.length !== 0){\n\t\t\t\t// loop through creating new markers on the map\n\t\t\t\tfor(var m in data.markers){\n\t\t\t\t\tvar mkr = new google.maps.Marker({\n\t\t\t\t\t\tposition: new google.maps.LatLng(data.markers[m].lat, data.markers[m].lng),\n\t\t\t\t\t\tmap: this.map\n\t\t\t\t\t});\n\t\t\t\t\tthis.addMapItem(mkr, \"marker\");\t\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// get the new polygons\n\t\t\tvar polygons = data.polygons;\n\t\t\t// if there are some..\n\t\t\tif(typeof polygons !=='undefined' && polygons.length !== 0){\n\t\t\t\t// loop through creating new polys on the map (and syncing them to our save object)\n\t\t\t\tfor(var poly in polygons){\n\t\t\t\t\tvar current_poly = polygons[poly];\n\t\t\t\t\tvar points = [];\n\t\t\t\t\tfor(var ll in current_poly){\n\t\t\t\t\t\tpoints.push(new google.maps.LatLng(current_poly[ll].lat,current_poly[ll].lng));\n\t\t\t\t\t}\n\t\t\t\t\tthis.addMapItem(new google.maps.Polygon({'paths': points, 'map': this.map}), \"polygon\", false);\n\t\t\t\t}\n\t\t\t}\n\n            if(typeof this.data.geoJSON ==='object'){\n                this.data.features = this.map.data.addGeoJson(data.geoJSON);\n            }\n\n\t\t\t// If map wants to be centered \n\t\t\tif(typeof center !== 'undefined' && center===true){\n\t\t\t\tthis.centerMap();\n\t\t\t}\t\n\t\t};\n\n\t\t/**\n\t\t * CenterMap\n\t\t * Centers map to show all polygons and points.\n\t\t */\n\t\tthis.centerMap = function(){\n\t\t\t// create bounds object\n\t\t\tvar bounds = new google.maps.LatLngBounds();\n\n\n\t\t\t// Add all the poly coords\n\t\t\tfor(var poly in this.data.polygon){\n\t\t\t\tif(this.data.polygon[poly]===false) continue;\n\n\t\t\t\tvar coords = this.data.polygon[poly].getPath().getArray();\n\t\t\t\tfor(var coord in coords){\n\t\t\t\t\tbounds.extend(coords[coord]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Add all the marker cords\n\t\t\tfor(var mkr in this.data.marker){\n\t\t\t\tif(this.data.marker[mkr]===false) continue;\n\n\t\t\t\tbounds.extend(this.data.marker[mkr].position);\n\t\t\t}\n\n            this.map.data.forEach(function(feature) {\n                processPoints(feature.getGeometry(), bounds.extend, bounds);\n            });\n\n\n\t\t\tif(bounds.isEmpty()){\n\t\t\t\t$center = $('#map-center');\n\t\t\t\tbounds.extend(new google.maps.LatLng($center.data('lat'),$center.data('lng')));\n\t\t\t}\n            // fit it\n\t\t\tthis.map.fitBounds(bounds);\n\t\t};\n\n         /**\n          * Process each point in a Geometry, regardless of how deep the points may lie.\n          * @param {google.maps.Data.Geometry} geometry The structure to process\n          * @param {function(google.maps.LatLng)} callback A function to call on each\n          *     LatLng point encountered (e.g. Array.push)\n          * @param {Object} thisArg The value of 'this' as provided to 'callback' (e.g.\n          *     myArray)\n          */\n         function processPoints(geometry, callback, thisArg) {\n             if (geometry instanceof google.maps.LatLng) {\n                 callback.call(thisArg, geometry);\n             } else if (geometry instanceof google.maps.Data.Point) {\n                 callback.call(thisArg, geometry.get());\n             } else {\n                 geometry.getArray().forEach(function(g) {\n                     processPoints(g, callback, thisArg);\n                 });\n             }\n         }\n\n\n         /**\n\t\t * exportData\n\t\t * Exports data in the {\"markers\": [], \"poly\": []} format.\n\t\t */\n\t\tthis.exportData = function(){\n\n\t\t\tvar payload = {\"polygons\": [], \"markers\": []};\n\n\t\t\t// get polygons\n\t\t\tfor(var i in this.data.polygon){\n\n\t\t\t\t// ignore deleted (falses)\n\t\t\t\tif(!this.data.polygon[i]) continue;\n\n\t\t\t\tvar poly = this.data.polygon[i];\n\t\t\t\tvar points = poly.getPath().getArray();\n\n\t\t\t\tvar tmpPoly = [];\n\n\t\t\t\tfor(var p in points){\n\t\t\t\t\ttmpPoly.push({\"lat\": points[p].lat(), \"lng\": points[p].lng()})\n\t\t\t\t}\n\t\t\n\t\t\t\tpayload.polygons.push(tmpPoly);\n\t\t\t}\n\n\t\t\t// Get markers\n\t\t\tfor(var i in this.data.marker){\n\t\t\t\tif(!this.data.marker[i]) continue;\n\t\t\t\tvar tmpMarker = {\"lng\": this.data.marker[i].position.lng(), \"lat\": this.data.marker[i].position.lat()}\n\t\t\t\tpayload.markers.push(tmpMarker);\n\t\t\t}\n\t\t\treturn payload;\n\t\t}\n\n\t\t/**\n\t\t * Generates UI buttons\n\t\t */\n\t\tthis.renderUi = function(){\n\t\t\t// Add buttons\n\t\t\tif(this.labels.polygon) this.buttons.polygon = $(\"<button class='btn btn-default'>\"+this.labels.polygon+\"</button>\");\n\t\t\tif(this.labels.marker) this.buttons.marker = $(\"<button class='btn btn-default'>\"+this.labels.marker+\"</button>\");\n\t\t\tif(this.labels.delete) this.buttons.del = $(\"<button disabled='disabled' class='btn pull-right btn-default'>\"+this.labels.delete+\"</button>\");\n\n\t\t\tvar controls = $(document.createElement('div'));\n\t\t\tthis.mapNode = $(document.createElement('div'));\n\t\t\tthis.mapNode.css('width', '100%');\n\t\t\tthis.mapNode.css('height', '400px');\n\n\t\t\tfor(var x in this.buttons){\n\t\t\t\tcontrols.append(this.buttons[x]);\n\t\t\t}\n\n\t\t\tthis.container.append(this.mapNode);\n\t\t\tthis.container.append(controls);\n\t\t};\n\t}\n\n\t/**\n\t * jQuery integration\n\t *\n\t * $(\"#map\").gmap({});\n\t */\n\t$.fn.gmap = function(data){\n\t\t// make the helper\n\t\tvar helper = new MapHelper($(this), data);\t\n\n\t\t// Set constraints\n\t\tif(typeof data.constraints === 'object') helper.constraints = data.constraints;\n\t\tif(typeof data.labels === 'object') helper.labels = data.labels;\n\n\t\t// Make map\n\t\tvar gMapOptions = !(typeof data.gMapOptions == 'undefined') ? data.gMapOptions : {};\n\t\thelper.init(gMapOptions);\n\n\t\t// Attach callbacks\n\t\tif(typeof data.onload === 'function') data.onload(helper);\n\t\tif(typeof data.onchange === 'function') helper.onchange = data.onchange;\n\n\t\treturn helper;\n\t};\n})();"],"sourceRoot":"/source/"}